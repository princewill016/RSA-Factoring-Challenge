#include <stdio.h>
#include <stdlib.h>
#include <math.h>

/**
 * is_prime - Checks if a number is prime.
 * @num: The number to check.
 * Return: 1 if prime, 0 otherwise.
 */
int is_prime(long long num)
{
    if (num < 2)
        return 0;
    if (num == 2 || num == 3)
        return 1;
    if (num % 2 == 0 || num % 3 == 0)
        return 0;
    for (long long i = 5; i <= sqrt(num); i += 6)
    {
        if (num % i == 0 || num % (i + 2) == 0)
            return 0;
    }
    return 1;
}

/**
 * find_prime_factors - Finds two prime factors of n.
 * @n: The number to factorize.
 */
void find_prime_factors(long long n)
{
    long long factor1;

    for (factor1 = 2; factor1 <= sqrt(n); factor1++)
    {
        if (n % factor1 == 0 && is_prime(factor1))
        {
            long long factor2 = n / factor1;
            if (is_prime(factor2))
            {
                printf("%lld=%lld*%lld\n", n, factor1, factor2);
                return;
            }
        }
    }
    printf("No prime factors found for %lld\n", n);  // For cases with no prime factorization
}

/**
 * main - Reads a file containing an RSA number and factorizes it.
 * @argc: Argument count.
 * @argv: Argument vector.
 * Return: 0 on success, 1 on failure.
 */
int main(int argc, char *argv[])
{
    FILE *file;
    char line[50];  /* Assuming numbers fit in 50 characters */
    long long num;

    if (argc != 2)
    {
        fprintf(stderr, "Usage: %s <file>\n", argv[0]);
        return 1;
    }

    file = fopen(argv[1], "r");
    if (file == NULL)
    {
        perror("Error opening file");
        return 1;
    }

    if (fgets(line, sizeof(line), file))
    {
        num = atoll(line);
        find_prime_factors(num);
    }

    fclose(file);
    return 0;
}

